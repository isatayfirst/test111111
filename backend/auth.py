from passlib.context import CryptContext
from jose import JWTError, jwt
from datetime import datetime, timedelta

# üîê –°–µ–∫—Ä–µ—Ç –∏ –∞–ª–≥–æ—Ä–∏—Ç–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
SECRET_KEY = "your-secret-key"  # ‚ùó–∑–∞–º–µ–Ω–∏ –Ω–∞ –Ω–∞–¥—ë–∂–Ω—ã–π –∫–ª—é—á
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60 * 24 * 7  # 7 –¥–Ω–µ–π

# üë§ –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# üîê –•—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
def hash_password(password: str) -> str:
    return pwd_context.hash(password)

# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
def verify_password(plain_password: str, hashed_password: str) -> bool:
    return pwd_context.verify(plain_password, hashed_password)

# üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
def create_access_token(data: dict, expires_delta: timedelta = None):
    to_encode = data.copy()
    expire = datetime.utcnow() + (expires_delta or timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES))
    to_encode.update({"exp": expire})
    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)

# üîç –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞
def decode_access_token(token: str):
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        return payload
    except JWTError:
        return None
